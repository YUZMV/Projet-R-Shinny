shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("DT")
runApp()
runApp()
runApp()
shiny::runApp()
library(tidyverse)
library(randomForest)
library(caret)
library(tidyverse)
library(randomForest)
library(caret)
# Chargement données
data <- read_csv("./data/Medicaldataset_clean.csv")
data
# Transformer 'result' en facteur (0=negatif, 1=positif)
data <- data %>% mutate(result = factor(result, levels = c(0,1)))
data
# Séparer en train/test (80/20)
set.seed(123)
train_index <- createDataPartition(data$result, p = 0.8, list = FALSE)
train_data <- data[train_index, ]
test_data <- data[-train_index, ]
# Affichage du train_data
train_data
# Entraîner Random Forest
rf_model <- randomForest(result ~ age + gender + heart_rate + systolic_blood_pressure +
diastolic_blood_pressure + blood_sugar + ck_mb + troponin,
data = train_data, ntree = 500, importance = TRUE)
# Évaluer sur test
pred <- predict(rf_model, test_data, type = "prob")[,2]  # probabilité classe 1
roc_obj <- pROC::roc(test_data$result, pred)
print(paste("AUC test RF:", pROC::auc(roc_obj)))
# Évaluer sur test
pred <- predict(rf_model, test_data, type = "prob")[,2]  # probabilité classe 1
pred
roc_obj <- pROC::roc(test_data$result, pred)
print(paste("AUC test RF:", pROC::auc(roc_obj)))
# Évaluer sur test
pred <- predict(rf_model, test_data, type = "prob")[,2]  # probabilité classe 1
roc_obj <- pROC::roc(test_data$result, pred)
print(paste("AUC test RF:", pROC::auc(roc_obj)))
library(tidyverse)
library(randomForest)
library(caret)
# Chargement données
data <- read_csv("./data/Medicaldataset_clean.csv")
data
# Transformer 'result' en facteur (0=negatif, 1=positif)
data <- data %>% mutate(result = factor(result, levels = c(0,1)))
data
# Séparer en train/test (80/20)
set.seed(123)
train_index <- createDataPartition(data$result, p = 0.8, list = FALSE)
train_data <- data[train_index, ]
test_data <- data[-train_index, ]
# Affichage du train_data
train_data
# Entraîner Random Forest
rf_model <- randomForest(result ~ age + gender + heart_rate + systolic_blood_pressure +
diastolic_blood_pressure + blood_sugar + ck_mb + troponin,
data = train_data, ntree = 500, importance = TRUE)
# Évaluer sur test
pred <- predict(rf_model, test_data, type = "prob")[,2]  # probabilité classe 1
roc_obj <- pROC::roc(test_data$result, pred)
print(paste("AUC test RF:", pROC::auc(roc_obj)))
# Sauvegarder modèle
saveRDS(rf_model, "./models/rf_heart_failure_model.rds")
library(tidyverse)
library(randomForest)
library(caret)
# Chargement données
data <- read_csv("./data/Medicaldataset_clean.csv")
data
# Transformer 'result' en facteur (0=negatif, 1=positif)
data <- data %>% mutate(result = factor(result, levels = c(0,1)))
data
# Séparer en train/test (80/20)
set.seed(123)
train_index <- createDataPartition(data$result, p = 0.8, list = FALSE)
train_data <- data[train_index, ]
test_data <- data[-train_index, ]
# Affichage du train_data
train_data
# Entraîner Random Forest
rf_model <- randomForest(result ~ age + gender + heart_rate + systolic_blood_pressure +
diastolic_blood_pressure + blood_sugar + ck_mb + troponin,
data = train_data, ntree = 500, importance = TRUE)
# Évaluer sur test
pred <- predict(rf_model, test_data, type = "prob")[,2]  # probabilité classe 1
roc_obj <- pROC::roc(test_data$result, pred)
print(paste("AUC test RF:", pROC::auc(roc_obj)))
# Sauvegarder modèle
saveRDS(rf_model, "./models/rf_heart_failure_model.rds")
runApp()
shiny::runApp()
runApp()
runApp()
library(tidyverse)
library(randomForest)
library(caret)
# Chargement données
data <- read_csv("./data/Medicaldataset_clean.csv")
heart_data <- read_csv("./data/Medicaldataset.csv")
heart_data <- read_csv("./data/Medicaldataset.csv")
